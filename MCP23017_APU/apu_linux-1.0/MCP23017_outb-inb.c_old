#include <stdint.h>
#include "parport.h"
#include "rpiGpio.h"

#include <wiringPi.h>
#include <mcp23017.h>

#define KNRM  "\x1B[0m"
#define KRED  "\x1B[31m"
#define KGRN  "\x1B[32m"
#define KYEL  "\x1B[33m"
#define KBLU  "\x1B[34m"
#define KMAG  "\x1B[35m"
#define KCYN  "\x1B[36m"
#define KWHT  "\x1B[37m"


#define CHIPADDR 0x20
#define IOCON 0x0A
#define IODIRA 0x00
#define IPOLA 0x02
#define GPINTENA 0x04
#define DEFVALA 0x06
#define INTCONA 0x08
#define GPPUA 0x0C
#define INTFA 0x0E
#define INTCAPA 0x10
#define GPIOA 0x12
#define GPIOB 0x13
#define OLATA 0x14
#define IODIRB 0x01
#define IPOLB 0x03
#define GPINTENB 0x05
#define DEFVALB 0x07
#define INTCONB 0x09
#define GPPUB 0x0D
#define INTFB 0x0F
#define INTCAPB 0x11
#define GPIOB 0x13
#define OLATB 0x15



const char *byte_to_binary(int x)
{
    static char b[9];
    b[0] = '\0';

    int z;
    for (z = 128; z > 0; z >>= 1)
    {
        strcat(b, ((x & z) == z) ? "1" : "0");
    }

    return b;
}


//static int hasBeenInit = 0;


int changePortDir(int direction)
{
static int currentDirection = -10;
uint8_t dataBuffer[2] = { IODIRB , direction };


if ( (direction == 1) | (direction == 0) )
 {
  if (direction != currentDirection)
   {
    dataBuffer[0] = IODIRB;
    dataBuffer[1] = (direction * 0xFF);

    if (gpioI2cWriteData(&dataBuffer[0], 2) != OK)//PORTB INPUT
     printf("I2cWriteData failed.\n");
    else 
     currentDirection = direction;
   }
 }
 //printf("Current direction: %i\n",currentDirection);
 return currentDirection;
}

uint8_t remapSNESpins(uint8_t data)
{
uint8_t newData = 0x00;
int resetCounter = 0;

#define PA0_PIN 0x80
#define PA1_PIN 0x40
#define WR_PIN 0x20
#define RD_PIN 0x10
#define RESET_PIN 0x01
#define RESET_LED 0x08

#define ORIG_PA0_PIN 0x01
#define ORIG_PA1_PIN 0x02
#define ORIG_WR_PIN 0x04
#define ORIG_RD_PIN 0x08
//#define ORIG_RESET_PIN 0x01
//#define ORIG_RESET_LED 0x08

if ( (data & ORIG_PA0_PIN) == ORIG_PA0_PIN)
 newData = newData | PA0_PIN;
if ( (data & ORIG_PA1_PIN) == ORIG_PA1_PIN)
 newData = newData | PA1_PIN;
if ( (data & ORIG_WR_PIN) == ORIG_WR_PIN)
{
 newData = newData | WR_PIN;
 resetCounter++;
}
if ( (data & ORIG_RD_PIN) == ORIG_RD_PIN)
 {
 newData = newData | RD_PIN;
 resetCounter++;
}

if (resetCounter < 2)//Holds reset high, unless WR and RD are low
 newData = newData | (RESET_PIN + RESET_LED);

//if ( (data & 0x10) == 0x10)//checks Direction Pin
// newData = newData | 0x10;

return newData;

}


void    outb_MCP23017(uint8_t data,int port)
{
uint8_t dataBuffer[2] = { GPIOA , data };
int hasBeenInit = init_MCP23017(CHIPADDR);


if (port == CONTROL)
 {
  if ( (data & 0x20) == 0x20 )//change direction bit
   changePortDir(1);
  else
   changePortDir(0);

  data = data ^ 0x0B;//Inverts control Pins 0, 1, and 3
  data = remapSNESpins(data);//Maps original pins of sch to GPIO pins

  dataBuffer[0] = GPIOA;
  dataBuffer[1] = data;

  if (gpioI2cWriteData(&dataBuffer[0], 2) != OK)//Set outputs to buffer
   printf("I2cWriteData failed.\n");
 }
else if(port == DATA)
{
dataBuffer[0] = GPIOB;
dataBuffer[1] = data;

if (changePortDir(-1) == 0)//If in output mode
{
 if (gpioI2cWriteData(&dataBuffer[0], 2) != OK)//outputs data
  printf("I2cWriteData failed.\n");
}
else 
{
 printf("Nothing sent");
}
}


//printf("%i ", hasBeenInit );

printf("%s > OUT: ",KWHT);

if (port == DATA)
 printf("%s   DATA",KGRN );
else if (port == STATUS)
 printf("%s STATUS",KCYN );
else if (port == CONTROL)
 printf("%sCONTROL",KYEL );
else if (port == ECR)
 printf("%s   ECR",KMAG);
else
 printf("UNKNOWN PORT %u", port);

printf("| ");

printf("%03u-%s\n%s",data,byte_to_binary(data),KWHT);



}




uint8_t inb_MCP23017(int port)
{
int hasBeenInit = init_MCP23017(CHIPADDR);
//printf("%i ", hasBeenInit );

uint8_t data = 0;
uint8_t dataBuffer[2] = {GPIOB, 0x00};

if (changePortDir(-1) == 1)//input mode
{
//if (gpioI2cWriteData( &dataBuffer[0], 2) != OK)
 //printf("I2cWriteData failed.\n");

//gpioI2cReadData(&dataBuffer[0], 2);

printf("dataBuffer[0]: %u\n", dataBuffer[0]);
printf("dataBuffer[1]: %u\n", dataBuffer[1]);

data = dataBuffer[1];
}
else
 data = 0;


printf("%s <  IN: ",KWHT);

if (port == DATA)
 printf("%s   DATA",KGRN );
else if (port == STATUS)
 printf("%s STATUS",KCYN );
else if (port == CONTROL)
 printf("%sCONTROL",KYEL );
else if (port == ECR)
 printf("%s   ECR",KMAG);
else
 printf("UNKNOWN PORT %u", port);

printf("| ");

printf("%03u\n%s",data,KWHT);

 return  data;
}




int init_MCP23017(int chipAddr)
{
static int hasBeenInit = 0;
uint8_t dataBuffer[2] = { IODIRA , 0x00};

errStatus rtn;
if (hasBeenInit == 1)//Don't Set Up
 return 1;

else//Set up
 {

 if ((rtn = gpioSetup()) != OK)
 {
  printf("gpioSetup failed. Exiting\n");
  return -1;
 }
 else if (gpioI2cSetup() != OK)
 {
 printf("gpioI2cSetup failed. Exiting\n");
 return -1;
 }

if (gpioI2cSet7BitSlave(chipAddr) != OK)
{
 printf("gpioI2cSet7BitSlave failed. Exiting\n");
 return -1;
}

dataBuffer[0] = IODIRA;
dataBuffer[1] = 0x00; //Set Port A to outputs (CONTROL)
if (gpioI2cWriteData(&dataBuffer[0], 2) != OK)
 printf("I2cWriteData failed.\n");

changePortDir(0);//Set Port B to Outputs
hasBeenInit = 1;
return 0;
}


return -1;
}




int close_MCP23017(int chipAddr)
{
gpioI2cCleanup();
gpioCleanup();
return 1;
}


